VPS
IP: 213.139.208.116
Имя пользователя: root

ssh root@213.139.208.116
Пароль: Fx5bj&yhEX&&

Хостинг
Логин: lars15rb
Пароль: xjKAt7kKTRS9

VPS
Логин: lars15rb_vps
Пароль: Fx5bj&yhEX&&



Первичная настрока сервера:
https://beget.com/ru/kb/how-to/vps/razvertyvanie-django-s-pomoshchyu-nginx-postgresql-i-gunicorn#zavershenie-processa-nastroyki-lokalnogo-servera-s-django

venv внутри папки с проектом на том же уровне что docker
cd /home/sites/motrum
source motrumvenv/bin/activate


Добавление удаленного репозитория
Чтобы добавить новый удаленный репозиторий, выполните команду git remote add в терминале в каталоге, в котором хранится репозиторий.

Команда git remote add принимает два аргумента:

имя удаленного репозитория, например, origin;
URL-адрес удаленного репозитория, например, https://github.com/OWNER/REPOSITORY.git.
git pull git@github.com:Shvechkova/motrum.git main
remote add motrum_main https://github.com/Shvechkova/motrum.git
git pull motrum_main main



python manage.py createsuperuser 
python manage.py collectstatic

содержание sudo vim /etc/systemd/system/gunicorn.service
* 
[Unit]
Description=gunicorn daemon
After=network.target

[Service]
User=root
Group=www-data
WorkingDirectory=/home/sites/motrum
ExecStart=/home/sites/motrum/motrumvenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/home/sites/motrum/project.sock project.wsgi:application

[Install]
WantedBy=multi-user.target
*

ls -la ~/home/sites/motrum/project.sock | grep 

сожержание  sudo vim /etc/nginx/sites-available/motrum

*
server {
    listen 80;
    server_name motrum.yuriyzhidkov.ru 213.139.208.116;

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/sites/motrum;
    }

    location / {
        include proxy_params;
        proxy_pass http://unix:/home/sites/motrum/project.sock;
    }
}
*

на домене сменить aa днс адрес на апи
редис прописать в  сетигнгах через локалхост


настройка selary https://ploshadka.net/zapusk-celery-kak-daemon/
sudo nano /etc/systemd/system/celery.service
*
[Unit]
Description=Celery Service

# rabbitmq.target | redis.targetv
After=network.target redis.target

[Service]
Type=forking
User=root
Group=www-data

EnvironmentFile=-/etc/systemd/celeryd
WorkingDirectory=/home/sites/motrum/

PermissionsStartOnly=true
ExecStartPre=-/bin/mkdir -p ${CELERYD_STATE_DIR}
ExecStartPre=/bin/chown -R ${CELERYD_USER}:${CELERYD_GROUP} ${CELERYD_STATE_DIR}
ExecStart=/bin/sh -c '${CELERY_BIN} multi start \
    ${CELERYD_NODES} \
    -A ${CELERY_APP} \
    --pidfile=${CELERYD_PID_FILE} \
    --logfile=${CELERYD_LOG_FILE} \
    --loglevel=${CELERYD_LOG_LEVEL} \
    ${CELERYD_OPTS}'
ExecStop=/bin/sh -c '${CELERY_BIN} multi stopwait \
    ${CELERYD_NODES} \
    --pidfile=${CELERYD_PID_FILE}'
ExecReload=/bin/sh -c '${CELERY_BIN} multi restart \
    ${CELERYD_NODES} \
    -A ${CELERY_APP} \
    --pidfile=${CELERYD_PID_FILE} \
    --logfile=${CELERYD_LOG_FILE} \
    --loglevel=${CELERYD_LOG_LEVEL} \
    ${CELERYD_OPTS}'

[Install]
WantedBy=multi-user.target
*

sudo nano /etc/systemd/system/celerybeat.service

*
[Unit]
Description=CeleryBeat Service

# rabbitmq.target | redis.target
After=network.target redis.target

[Service]
Type=simple
User=root
Group=www-data
EnvironmentFile=-/etc/systemd/celeryd
WorkingDirectory=/home/sites/motrum/
PermissionsStartOnly=true
ExecStartPre=-/bin/mkdir -p ${CELERYBEAT_STATE_DIR}
ExecStartPre=/bin/chown -R ${CELERYD_USER}:${CELERYD_GROUP} ${CELERYBEAT_STATE_DIR}
# ExecStartPre=/bin/rm ${CELERYBEAT_SCHEDULE}
ExecStart=/bin/sh -c '${CELERY_BIN} -A ${CELERY_APP} beat  \
    --pidfile=${CELERYBEAT_PID_FILE} \
    --logfile=${CELERYBEAT_LOG_FILE} --loglevel=${CELERYD_LOG_LEVEL}'
ExecStop=/bin/systemctl kill celerybeat.service

[Install]
WantedBy=multi-user.target
*


sudo nano /etc/systemd/system/flower.service

*
[Unit]
Description=Flower Celery Service

[Service]
User=root
Group=www-data
EnvironmentFile=-/etc/systemd/celeryd
WorkingDirectory=/home/sites/motrum/
ExecStart=/home/sites/motrum/motrumvenv/bin/celery -A project flower --port=5666
Restart=on-failure
Type=simple

[Install]
WantedBy=multi-user.target
*

Настроки для всех
sudo nano /etc/systemd/celeryd


*
# Access
CELERYD_USER="root"
CELERYD_GROUP="www-data"

# Path to directory and task
CELERY_BIN="/home/sites/motrum/motrumvenv/bin/celery"
CELERY_APP="project"

# Worker settings
CELERYD_NODES="worker1"
CELERYD_OPTS=" --purge"

CELERYD_MULTI="multi"
CELERYD_STATE_DIR="/var/run/celery"
CELERYD_PID_FILE="/var/run/celery/%n.pid"
CELERYD_LOG_FILE="/var/log/celery/%n.log"

# Beat settings
CELERYBEAT_STATE_DIR="/var/run/celerybeat"
CELERYBEAT_PID_FILE="/var/run/celerybeat/beat.pid"
CELERYBEAT_LOG_FILE="/var/log/celery/beat.log"
CELERYBEAT_SCHEDULE="/var/run/celerybeat/schedule"
CELERYBEAT_WORKDIR="/home/sites/motrum/"

# INFO / DEBUG / etc
CELERYD_LOG_LEVEL="INFO"
CELERYBEAT_LOG_LEVEL="INFO"

*


ExecStart=/bin/sh -c '${CELERY_BIN} -A ${CELERY_APP} beat  \
    --pidfile=${CELERYBEAT_PID_FILE} \
    --logfile=${CELERYBEAT_LOG_FILE} --loglevel=${CELERYD_LOG_LEVEL}'


Теперь запускаем сервис:

sudo systemctl enable celery.service
sudo systemctl enable celerybeat.service
sudo systemctl enable flower.service

Или запускаем и добавляем его в автозагрузку:

sudo systemctl enable --now celery.service
sudo systemctl enable --now celerybeat.service
sudo systemctl enable --now flower.service

Перезапустить после правки файлов:

sudo systemctl daemon-reload
sudo systemctl restart celery.service
sudo systemctl restart celerybeat.service
sudo systemctl restart flower.service


Проверить статус:

sudo systemctl status celery.service
sudo systemctl status celerybeat.service
sudo systemctl status flower.service
Остановить:

sudo systemctl stop celery.service
sudo systemctl stop celerybeat.service
sudo systemctl stop flower.service




запуск flower командой
 celery -A project flower --port=5666


       














