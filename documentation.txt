# Документация проекта Motrum

## 1. Общее описание
Motrum - это комплексная система управления спецификациями, продуктами и поставщиками, построенная на Django. Система предназначена для автоматизации бизнес-процессов, связанных с управлением товарами, спецификациями и взаимодействием с клиентами.

### 1.1 Основные возможности
- Управление спецификациями и продуктами
- Интеграция с Битрикс24
- Система уведомлений
- Управление проектами
- Управление вакансиями
- Клиентский портал
- Административный интерфейс

### 1.2 Целевая аудитория
- Администраторы системы
- Менеджеры по продажам
- Сотрудники отдела закупок
- Клиенты
- Поставщики

## 2. Архитектура проекта

### 2.1 Структура проекта
```
motrum/
├── apps/                    # Основные приложения
│   ├── core/               # Базовый функционал
│   ├── specification/      # Управление спецификациями
│   ├── product/           # Управление продуктами
│   ├── supplier/          # Управление поставщиками
│   ├── client/            # Управление клиентами
│   ├── user/              # Управление пользователями
│   ├── notifications/     # Система уведомлений
│   ├── admin_specification/ # Администрирование спецификаций
│   ├── projects_web/      # Управление проектами
│   └── vacancy_web/       # Управление вакансиями
├── static/                 # Статические файлы
├── media/                  # Медиафайлы
├── docker/                # Docker конфигурация
├── documentation/         # Документация
└── middlewares/          # Промежуточное ПО
```

### 2.2 Основные компоненты

#### 2.2.1 Core (apps/core/)
Базовый модуль, содержащий общие модели и утилиты:

##### Модели:
- `Currency` - модель валют
  - name: CharField - название валюты
  - words_code: CharField - буквенный код
  - code: SmallIntegerField - цифровой код

- `Vat` - модель НДС
  - name: SmallIntegerField - процент НДС

- `BaseInfo` - базовая информация о компании
  - stamp: ImageField - печать компании
  - signature: ImageField - подпись в документах
  - full_name_legal_entity: CharField - полное название
  - short_name_legal_entity: CharField - краткое название
  - inn: CharField - ИНН
  - kpp: CharField - КПП
  - ogrn: CharField - ОГРН
  - legal_post_code: PositiveIntegerField - индекс юр. адреса
  - legal_city: CharField - город юр. адреса
  - legal_address: CharField - юр. адрес
  - postal_post_code: CharField - индекс почтового адреса
  - postal_city: CharField - город почтового адреса
  - postal_address: CharField - почтовый адрес
  - tel: CharField - телефон
  - counter_bill: PositiveIntegerField - номер счета клиента
  - counter_bill_offer: PositiveIntegerField - номер счета-оферты

- `BaseImage` - базовые изображения для документов
  - logo: ImageField - логотип
  - vendors: ImageField - изображение поставщиков

##### Представления:
- `solutions_all` - отображение всех решений
- `company_about` - информация о компании
- `csrf_failure` - обработка CSRF ошибок
- `permission_denied` - обработка ошибок доступа
- `page_not_found` - обработка 404 ошибок

#### 2.2.2 Product (apps/product/)
Модуль управления продуктами:

##### Модели:
- `Product` - основная модель продукта
  - article: CharField - артикул
  - supplier: ForeignKey - поставщик
  - vendor: ForeignKey - производитель
  - article_supplier: CharField - артикул поставщика
  - category: ForeignKey - категория
  - group: ForeignKey - группа

##### Представления:
- `product_search` - поиск продуктов
- `GropeAutocomplete` - автодополнение групп

#### 2.2.3 Specification (apps/specification/)
Модуль управления спецификациями:

##### Основные функции:
- Создание спецификаций
- Редактирование спецификаций
- Генерация PDF
- Управление ценами
- Интеграция с поставщиками

#### 2.2.4 Client (apps/client/)
Модуль управления клиентами:

##### Модели:
- `Client` - модель клиента
- `PhoneClient` - контактная информация
  - phone: CharField - номер телефона
  - client: ForeignKey - связь с клиентом

- `EmailsAllWeb` - хранение контактов
  - name: CharField - контактное лицо
  - phone: CharField - номер телефона

- `EmailsCallBack` - обратные звонки
  - name: CharField - контактное лицо
  - phone: CharField - номер телефона

#### 2.2.5 Projects (apps/projects_web/)
Модуль управления проектами:

##### Модели:
- `Project` - модель проекта
  - company: CharField - компания
  - name: CharField - название проекта
  - slug: SlugField - URL-имя
  - text: TextField - описание
  - image_main: ImageField - главное изображение
  - is_view_home_web: BooleanField - показ на главной
  - category_project: ForeignKey - категория проекта
  - data_create: DateField - дата создания
  - data_project: DateField - дата реализации
  - place_object: CharField - место реализации

- `CategoryProject` - категории проектов
  - name: CharField - название
  - slug: SlugField - URL-имя
  - short_name: CharField - краткое название
  - article: PositiveIntegerField - порядок

#### 2.2.6 Vacancy (apps/vacancy_web/)
Модуль управления вакансиями:

##### Модели:
- `Vacancy` - модель вакансии
- `VacancyCategory` - категории вакансий
  - name: CharField - название
  - slug: SlugField - URL-имя
  - is_view: BooleanField - видимость
  - article: PositiveIntegerField - порядок

##### Представления:
- `vacancy` - список вакансий
- `vacancy_item` - детальная страница вакансии

## 3. API Endpoints

### 3.1 Vacancy API
```python
router.register(r"v1/vacancy", view_sets.VacancyViewSet)
```

### 3.2 Notifications API
```python
router = routers.DefaultRouter()
```

## 4. Установка и развертывание

### 4.1 Требования
- Python 3.8+
- PostgreSQL 12+
- Redis
- Docker
- Docker Compose

### 4.2 Установка
1. Клонирование репозитория:
```bash
git clone [repository_url]
```

2. Установка зависимостей:
```bash
pip install -r requirements.txt
```

3. Настройка переменных окружения:
```bash
cp .env.example .env
# Редактирование .env файла
```

4. Миграции базы данных:
```bash
python manage.py migrate
```

5. Создание суперпользователя:
```bash
python manage.py createsuperuser
```

### 4.3 Docker развертывание
1. Сборка образов:
```bash
docker-compose build
```

2. Запуск контейнеров:
```bash
docker-compose up -d
```

## 5. Разработка

### 5.1 Структура кода
- Следование PEP 8
- Типизация кода
- Документирование функций
- Модульные тесты

### 5.2 Рабочий процесс
1. Создание ветки для новой функциональности
2. Разработка и тестирование
3. Code review
4. Слияние в основную ветку

### 5.3 Тестирование
- Модульные тесты
- Интеграционные тесты
- End-to-end тесты
- Нагрузочное тестирование

## 6. Мониторинг и поддержка

### 6.1 Логирование
- Системные логи
- Логи приложения
- Логи ошибок
- Аудит действий

### 6.2 Мониторинг
- Производительность системы
- Использование ресурсов
- Ошибки и исключения
- Активность пользователей

### 6.3 Резервное копирование
- Регулярное резервное копирование БД
- Резервное копирование медиафайлов
- Стратегия восстановления

## 7. Безопасность

### 7.1 Аутентификация
- JWT токены
- Сессии
- CSRF защита

### 7.2 Авторизация
- Ролевой доступ
- Права доступа
- Проверка разрешений

### 7.3 Защита данных
- Шифрование
- Безопасное хранение паролей
- Защита от SQL-инъекций

## 8. Интеграции

### 8.1 Битрикс24
- Синхронизация данных
- API интеграция
- Обработка событий

### 8.2 Поставщики
- API интеграция
- Обмен данными
- Синхронизация цен

### 8.3 Платежные системы
- Интеграция с платежными шлюзами
- Обработка платежей
- Учет транзакций

## 9. Обновления и версионирование

### 9.1 Версионирование
- Семантическое версионирование
- Чейнджлоги
- История изменений

### 9.2 Обновления
- Процесс обновления
- Откат изменений
- Тестирование обновлений

## 10. Контакты и поддержка

### 10.1 Техническая поддержка
- Email: [support_email]
- Телефон: [support_phone]
- Чат поддержки: [chat_url]

### 10.2 Документация
- Руководство пользователя
- API документация
- Руководство администратора
- Часто задаваемые вопросы

## 11. Лицензия
[Информация о лицензии]